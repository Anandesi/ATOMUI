Analysis of DAG-Based Workflow Feature
This document outlines an analysis of the proposed feature to enable users to create and manage Directed Acyclic Graphs (DAGs) for custom workflows, similar to Azure ML or AutoML, within our application. It covers business, technology, and timeline considerations.
Business Perspective
 * Scenario Identification: Thoroughly identify and document all potential use cases for DAGs. This will allow us to understand the specific requirements and constraints for each scenario, preventing the feature from becoming overly generic and difficult to manage. Prioritization of key scenarios is crucial.
 * Component Design: Based on the identified scenarios, design individual, modular components for the DAG. This approach promotes reusability, simplifies maintenance, and facilitates the creation of complex validation flows.
 * Scalability Planning: DAGs, especially complex ones, can be computationally intensive. Consider the hardware requirements for scaling the execution engine to handle these complex validation flows. Load testing will be essential.
Technology Perspective
 * Database Design: Dynamic workflows necessitate a robust and flexible database schema. While our current Oracle database can likely handle the core data, exploring NoSQL database options for storing workflow definitions, intermediate results, and metadata should be investigated. This could improve performance and scalability for complex DAGs.
 * Frontend Development: React Flow is a promising library for creating the DAG visualization and interaction in the frontend. However, designing a user-friendly interface for creating and managing complex DAGs with appropriate validation rules will be a significant challenge. Define clear use cases for each component and implement robust DAG dependency validation.
 * Backend Development: A bottom-up redesign of our backend components is recommended. This will ensure modularity and maintainability. Key challenges include:
   * DAG Validation: Implementing robust validation rules for DAGs is crucial. This includes checking for cycles, ensuring data type compatibility between tasks, and enforcing resource limits.
   * Compute Resource Identification: Accurately estimating and allocating compute resources for DAG execution is essential. Investigate resource management and scheduling strategies.
   * Technology Limitations: The current AD-ENT token timeout of 1 hour and a maximum refresh time of 8 hours pose a potential limitation for long-running workflows. Explore solutions to mitigate this, such as background processing or alternative authentication mechanisms.
   * Containerization: Leveraging containerization technologies like Docker will be crucial for scaling the execution environment and managing dependencies. Investigate the organization's current capabilities and policies regarding Docker.
Recommendations and Timeline
 * Proof of Concept (POC): Before committing to a full implementation, a small-scale POC is highly recommended. This POC should focus on addressing the key technical challenges, including DAG validation, resource management, and the interaction between frontend and backend components. The POC should also test different approaches for managing DAG dependencies and executing workflows.
 * Timeline: Enabling this feature within 10 months is ambitious and requires a comprehensive redesign of our architecture. Allocate at least 2 months for testing, migration, and production deployment, acknowledging that these phases are often subject to delays due to external dependencies. A phased rollout might be a more realistic approach.
 * Resource Requirements: The technology team should provide access to necessary frontend and backend libraries and ensure a dedicated development environment is available.
 * Communication and Collaboration: Open and frequent communication between the development team, product owners, and stakeholders is crucial for the success of this project.
Conclusion
This feature offers significant potential for enhancing our application. However, we must proceed cautiously, addressing the technical challenges and managing expectations regarding the timeline. The recommended POC will provide valuable insights and help us refine our approach before committing to a full-scale implementation. A restrictive initial scope, focusing on well-defined use cases, will increase our chances of success.
